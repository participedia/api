swagger: "2.0"
info:
  version: "0.0.1"
  title: Participedia
  description: This API is the proxy used by Participedia.net to talk to the database of records in the database, as well as the user database.  It should be considered the stable interface to the data.  Some data sources may have their own API, but those are subject to change without notice.
# during dev, should point to your local machine
host: localhost:10010
# basePath prefixes all resource paths
basePath: /
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
securityDefinitions:
  token:
    type: apiKey
    description: For all of the API calls below, any call that causes a change in state on the server must be signed with a JWT token provided by Auth0.  The credentials of the user will be used to determine whether the user has the permissions required to perform the requested operation.  See Auth0 docs for details.
    name:
      Authorization
    in:
      header


paths:

  /case/countByCountry:
    x-swagger-router-controller: case
    get:
      description: Get counts of cases by Country
      operationId: countByCountry
      tags:
        - case
      produces:
        - application/json
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/case'


  /case/newfff:
    x-swagger-router-controller: case
    put:
      description: Submit a new case
      operationId: newCase
      tags:
        - case
      produces:
        - application/json
      security:
        - token: []
      parameters:
        - name: case
          in: body
          description: the new case data
          schema:
            $ref: '#/definitions/case'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/case'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /case/{caseId}:
    x-swagger-router-controller: case
    put:
      description: Submit a new revision of a case
      operationId: editCaseById
      tags:
        - case
      produces:
        - application/json
      security:
        - token: []
      parameters:
        - name: caseId
          in: path
          description: the caseId
          type: integer
          required: true
        - name: case
          in: body
          description: the new version of the case
          required: true
          schema:
            $ref: '#/definitions/case'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/case'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    get:
      description: Get a case
      operationId: getCaseById
      tags:
        - case
      produces:
        - application/json
      security:
        - token: []
      parameters:
        - name: caseId
          in: path
          description: the caseId
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/case'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: Delete a case
      operationId: deleteCaseById
      tags:
        - case
      security:
        - token: []
      parameters:
        - name: caseId
          in: path
          description: the caseId
          type: integer
          required: true
      responses:
        "200":
          description: Success
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


  /method/new:
    x-swagger-router-controller: method
    put:
      description: Submit a new method
      operationId: newMethod
      tags:
        - method
      security:
        - token: []
      parameters:
        - name: method
          in: body
          description: the new method data
          schema:
            $ref: '#/definitions/method'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/method'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /method/{methodId}:
    put:
      description: Submit a new revision of a method
      operationId: editMethodById
      tags:
        - method
      security:
        - token: []
      parameters:
        - name: methodId
          in: path
          description: the methodId
          type: integer
          required: true
        - name: method
          in: body
          description: the new version of the method
          required: true
          schema:
            $ref: '#/definitions/method'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/method'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    get:
      description: get a method description
      operationId: getMethodById
      tags:
        - method
      security:
        - token: []
      parameters:
        - name: methodId
          in: path
          description: the methodId
          type: integer
          required: true
        - name: method
          in: body
          description: the new version of the method
          required: true
          schema:
            $ref: '#/definitions/method'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/method'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: Delete a method
      operationId: deleteMethodById
      tags:
        - method
      security:
        - token: []
      parameters:
        - name: methodId
          in: path
          description: the `methodId`
          type: integer
          required: true
      responses:
        "200":
          description: Success
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


  /organization/new:
    x-swagger-router-controller: organization
    put:
      description: Submit a new organization
      operationId: newOrganization
      tags:
        - organization
      security:
        - token: []
      parameters:
        - name: organization
          in: body
          description: the new the organization
          schema:
            $ref: '#/definitions/organization'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/organization'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /organization/{organizationId}:
    put:
      description: Submit a new revision of a organization
      operationId: editOrganization
      tags:
        - organization
      security:
        - token: []
      parameters:
        - name: organizationId
          in: path
          description: the `organizationId`
          type: integer
          required: true
        - name: case
          in: body
          description: the new version of the organization
          required: true
          schema:
            $ref: '#/definitions/organization'
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/organization'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    get:
      description: Get an organization
      operationId: getOrganization
      tags:
        - organization
      security:
        - token: []
      parameters:
        - name: organizationId
          in: path
          description: the `organizationId`
          type: integer
          required: true
      responses:
        "200":
          description: Success
          schema:
            $ref: '#/definitions/organization'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: Delete an organization
      operationId: deleteOrganization
      tags:
        - organization
      security:
        - token: []
      parameters:
        - name: organizationId
          in: path
          description: the organizationId
          type: integer
          required: true
      responses:
        "200":
          description: Success
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


  /feature/{recordType}/{recordId}:
    put:
      tags:
        - case
        - method
        - organization
        - news
      description: Set the `featured` status of a record (case, method, organization or news).  The query parameter `featured` is a boolean.
      security:
        - token: []
      parameters:
        - name: recordType
          in: path
          description: the recordType one of `case`, `method`, `organization`, `news`
          type: string
          required: true
        - name: recordId
          in: path
          description: the recordID
          type: integer
          required: true
        - name: featured
          in: query
          description: whether to mark the item as featured or not
          type: boolean
          required: true
      responses:
        "200":
          description: Success
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /hide/{recordType}/{recordId}:
    put:
      tags:
        - case
        - method
        - organization
        - news
      description: Set the `hidden` status of a record (case, method, organization or news).  The query parameter `hidden` is a boolean.  Hidden records are not available to lay users or the web site, they are effectively in the 'moderation' queue.
      security:
        - token: []
      parameters:
        - name: recordType
          in: path
          description: the recordType is one of `case`, `method`, `organization`, `news`
          type: string
          required: true
        - name: recordId
          in: path
          description: the recordID
          type: integer
          required: true
        - name: hidden
          in: query
          description: whether to mark the item as shown or not
          type: boolean
          required: true
      responses:
        "200":
          description: Success
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /users:
    x-swagger-router-controller: users
    get:
      description: list all users
      tags:
        - user
      parameters:
        - name: startAt
          in: query
          description: index to start counting at (defaults to 0)
          required: false
          type: integer
        - name: num
          in: query
          description: max number of users to return (defaults to 30)
          required: false
          type: integer
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /user/{id}:
    get:
      description: Returns a user profile based on a single ID
      operationId: findUserById
      tags:
        - user
      produces:
        - application/json
        - application/xml
        - text/xml
        - text/html
      parameters:
        - name: id
          in: path
          description: ID of user whose profile we're fetching
          required: true
          type: integer
          format: int64
      responses:
        '200':
          description: user profile
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    put:
      description: Sets user profile
      operationId: setUserProfile
      tags:
        - user
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of user whose profile we're updating
          required: true
          type: integer
          format: int64
        - name: profile
          in: body
          schema:
            $ref: '#/definitions/user'

      responses:
        '200':
          description: user profile
          schema:
            $ref: '#/definitions/user'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'
    delete:
      description: deletes a single user based on the ID supplied
      operationId: deleteUser
      tags:
        - user
      security:
        - token: []
      parameters:
        - name: id
          in: path
          description: ID of pet to delete
          required: true
          type: integer
          format: int64
      responses:
        '204':
          description: user deleted
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


  /notifications/{userId}:
    get:
      description: List not-yet-acknowledged notifications for used with id `userId`
      tags:
        - notification
      parameters:
        - name: userId
          in: path
          description: user ID
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/notification'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'

  /notification/{notificationId}/ack:
    put:
      description: Mark notification with id `notificationId` as acknowledged
      tags:
        - notification
      parameters:
        - name: notificationId
          in: path
          description: notification ID
          required: true
          type: integer
      responses:
        "200":
          description: Success
          schema:
            type: array
            items:
              $ref: '#/definitions/notification'
        default:
          description: unexpected error
          schema:
            $ref: '#/definitions/errorModel'


  /swagger:
    x-swagger-pipe: swagger_raw

# complex objects have schema definitions
definitions:

  case:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string

  caseSummary:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string
      pictureURL:
        type: string


  method:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string

  methodSummary:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string
      pictureURL:
        type: string


  organization:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string

  organizationSummary:
    type: object
    required:
      - id
      - title
    properties:
      id:
        type: integer
      title:
        type: string
      pictureURL:
        type: string


  notification:
    type: object
    required:
      - id
      - userId
      - title
      - message
      - acked
    properties:
      id:
        type: integer
      userId:
        type: integer
      title:
        type: string
      message:
        type: string
      acked:
        type: boolean

  user:
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: integer
      name:
        type: string
      picture:
        type: string
      bookmarks:
        $ref: "#/definitions/bookmark"

# note: I think it makes sense to make the user profile include the subset of
# the records that often get displayed, instead of just the IDs to them (to
# avoid http traffic)

# the user data model should store the IDs, but the API should return the data that
# the common use cases will need (in this case, titles, thumbnail image, etc., but
# probably not full body or all fixed fields.

  bookmark:
    type: object
    properties:
      cases:
        type: array
        items:
          $ref: "#/definitions/caseSummary"
      methods:
        type: array
        items:
          $ref: "#/definitions/methodSummary"
      organizations:
        type: array
        items:
          $ref: "#/definitions/organizationSummary"

  errorModel:
      type: string
      required:
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
